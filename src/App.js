import { useEffect, useState } from 'react'
import { makeStyles } from 'tss-react/mui';
import Timer from './components/Timer';
import { Button, TextField, Typography } from '@mui/material';

const useStyles = makeStyles()(() =>
({
  app: {
    display: 'flex',
    flexDirection: "column",
    alignItems: 'center',
    height: '100vh',
    backgroundColor: 'rgb(210, 224, 251)',
    gap: '15px'
  },
  formSection: {
    display: 'flex',
    gap: "10px"
  },
  numbersContainer: {
    display: 'grid'
  },
  numberBox: {
    width: '100px',
    height: '100px',
    border: '1px solid rgba(187, 180, 180, 0.547)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    cursor: 'pointer',
    transition: 'background-color 0.5s ease-out'

  },
  visibleBox: {
    color: 'black',
    backgroundColor: "rgba(255, 255, 0, 0.878)"

  }, doneBox: {
    backgroundColor: '#5B99C2',
    color: 'white'
  },
  number: {
    fontSize: '40px'
  },
  header: {
    color: 'rgb(0, 31, 63)',
    fontSize: '70px',
    fontWeight: 'bold'
  },
  errorMessage: {
    color: 'red',
    fontSize: '15px'
  },
  instruction: {
    color: '#001F3F'
  }


})
);

function App() {
  const [gameNumbers, setGameNumbers] = useState([]);
  const [start, setStart] = useState(false);
  const [count, setCount] = useState(0);
  const [time, setTime] = useState('00:00:00');
  const [rowNumber, setRowNumber] = useState('');
  const [errorMessage, setErrorMessage] = useState('')


  const showTimer = (ms) => {
    const milliseconds = Math.floor((ms % 1000) / 10)
      .toString()
      .padStart(2, '0');
    const second = Math.floor((ms / 1000) % 60)
      .toString()
      .padStart(2, '0');
    const minute = Math.floor((ms / 1000 / 60) % 60)
      .toString()
      .padStart(2, '0');
    setTime(minute + ':' + second + ':' + milliseconds);
  };

  const handleClickRowCount = () => {
    if (rowNumber % 2 === 0) {
      let maxNumber = Math.pow(rowNumber, 2) / 2;
      let itemsArray = [];

      for (let i = 1; i <= maxNumber; i++) {
        itemsArray.push({ number: i, visibility: false, done: false })
        itemsArray.push({ number: i, visibility: false, done: false })
      }

      setGameNumbers(itemsArray.sort(() => Math.random() - 0.5));
      setErrorMessage('')



    } else {
      setErrorMessage('Please enter an EVEN Number')
    }
  }

  useEffect(() => {
    let initTime = new Date();

    if (!start) {
      return;
    }

    let id = setInterval(() => {
      let left = count + (new Date() - initTime);
      setCount(left);
      showTimer(left);
      if (left <= 0) {
        setTime('00:00:00:00');
        clearInterval(id);
      }
    }, 1);

    return () => clearInterval(id);

  }, [count, start]);

  const handleClick = (index) => {
    const updatedNumbers = gameNumbers.map((item, i) =>
      i === index ? { ...item, visibility: !item.visibility } : item
    );
    const visibleItems = updatedNumbers.filter(item => item.visibility);
    const visibleItemsCount = visibleItems.length;
    setStart(true);
    if (visibleItemsCount > 2) {
      return;
    }
    setGameNumbers(updatedNumbers)
    setTimeout(() => {
      if (visibleItemsCount === 2) {
        const firstValueNumber = visibleItems[0].number;
        const secondValueNumber = visibleItems[1].number;
        if (firstValueNumber === secondValueNumber) {
          const updatedArr = gameNumbers.map((item) => {
            if (item.number === firstValueNumber) {
              return { ...item, done: true, visibility: false }
            } return item
          });
          const doneItems = updatedArr.filter(item => item.done);
          if (doneItems.length === gameNumbers.length) setStart(false);
          setGameNumbers(updatedArr)
        } else {
          const updatedArr = gameNumbers.map((item) => ({ ...item, visibility: false }));
          setGameNumbers(updatedArr)

        }
      }
    }, 500);


  };
  const { classes } = useStyles();


  return (
    <div className={classes.app}>
      <Typography className={classes.header}>
        Let's Play
      </Typography>

      <div className={classes.formSection}>
        <TextField id="outlined-basic" label="Enter A  Number" variant="outlined" onChange={(e) => setRowNumber(e.target.value)} />
        <Button variant="contained" onClick={handleClickRowCount}>Show</Button>
      </div>
      <div>
        {!gameNumbers.length ? <Typography className={classes.instruction}>Flip matching pairs of boxes in a grid generated by entering an even number, and race against the timer to win!</Typography> : ''}
      </div>
      <div>
        {errorMessage && <Typography className={classes.errorMessage}> {errorMessage}</Typography>}
      </div>
      <div className={classes.numbersContainer} style={{ gridTemplateColumns: `repeat( ${Math.sqrt(gameNumbers.length)}, 1fr)` }}>
        {gameNumbers.map((item, index) => (
          <div className={`${classes.numberBox} ${item.visibility ? classes.visibleBox : ''}  ${item.done ? classes.doneBox : ''} `} key={index} onClick={() => handleClick(index)} >
            <div className={classes.number} style={{ visibility: item.visibility || item.done ? 'visible' : 'hidden' }}> {item.number}</div>
          </div>

        ))}
      </div>

      {gameNumbers.length ? <Timer time={time} /> : <div></div>}

    </div>
  );
}

export default App;
